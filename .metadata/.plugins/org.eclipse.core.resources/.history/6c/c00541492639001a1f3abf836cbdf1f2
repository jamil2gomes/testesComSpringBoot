package br.com.testeComSpring.service;

import java.math.BigDecimal;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import br.com.testeComSpring.model.Cidade;
import br.com.testeComSpring.model.Cliente;
import br.com.testeComSpring.model.Frete;
import br.com.testeComSpring.model.UF;
import br.com.testeComSpring.repository.CidadeRepository;
import br.com.testeComSpring.service.exception.FreteException;


@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)
public class FreteServiceTest {
	
	@Autowired
	private FreteService freteService;
	
	@Autowired
	private CidadeRepository cidadeRepository;
	
	@Rule
    public ExpectedException expectedException = ExpectedException.none();
	
	private Frete frete;
	
	private final BigDecimal valorFixo = new BigDecimal(10.0);
	
	@Test
	public void deveLancarExcecaoAoSalvarFreteSemClienteCadastrado() throws Exception{
		
		expectedException.expect(FreteException.class);
		expectedException.expectMessage("Unsaved transient entity".startsWith(prefix));
		
		Cliente cliente = new Cliente("Jamil", "endereco","32344543");
		Cidade cidade = new Cidade("Sao Luis", UF.MA, new BigDecimal(10));
		cidadeRepository.save(cidade);
		
		
		BigDecimal peso = new BigDecimal(5.0);
		
		BigDecimal valorFrete = this.calculaValorFrete(peso, cidade.getTaxa());
		
		frete = new Frete("uma descricao aqui", peso, valorFrete, cliente, cidade);
		
		freteService.inserir(frete);
		
	}
	
	private BigDecimal calculaValorFrete(BigDecimal peso, BigDecimal valorTaxa) {
		return  valorTaxa.add(peso.multiply(valorFixo));
	}
	
	

}
