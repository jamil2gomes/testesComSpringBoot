package br.com.testeComSpring.model;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit4.SpringRunner;

import br.com.testeComSpring.repository.ClienteRepository;

@RunWith(SpringRunner.class)
@DataJpaTest
@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)
public class ClienteValidationTest {
	
	private Cliente cliente;
	
	private Validator validador;
	
	@Autowired
	ClienteRepository clienteRepository;
	
	@Rule
	public ExpectedException expectedException = ExpectedException.none();
	
	@Before
	public void setUp() {
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		this.validador = factory.getValidator();
		
		cliente = new Cliente("Jamil", "Rua 1", "32344334");
	}
	
	@Test
	public void deveLancarExcecaoAoSalvarClienteComNomeNulo() {
		
		expectedException.expect(ConstraintViolationException.class);
		expectedException.expectMessage("Nome não pode ser vazio");
		
		cliente.setNome(null);
		clienteRepository.save(cliente);
	}
	
	@Test
	public void naoDeveAceitarEnderecoNulo() {
		cliente.setEndereco(null);
		
		Set<ConstraintViolation<Cliente>> restricoes = validador.validate(cliente);
	
		ConstraintViolation<Cliente> restricao = restricoes.iterator().next();
		
		
	assertAll(
			()-> assertTrue(restricoes.size() == 1),
			()->assertEquals("endereco", restricao.getPropertyPath().toString()),
			()->assertEquals("Endereco não pode ser vazio", restricao.getMessage()),
			()->assertEquals(null, restricao.getInvalidValue())			
			);
			
	}
	
	
	@Test
	public void naoDeveAceitarTelefoneNulo() {
		cliente.setTelefone(null);
		
		Set<ConstraintViolation<Cliente>> restricoes = validador.validate(cliente);
	
		ConstraintViolation<Cliente> restricao = restricoes.iterator().next();
		
		
	assertAll(
			()-> assertTrue(restricoes.size() == 1),
			()->assertEquals("telefone", restricao.getPropertyPath().toString()),
			()->assertEquals("Telefone não pode ser vazio", restricao.getMessage()),
			()->assertEquals(null, restricao.getInvalidValue())			
			);
			
	}
	
	
	@Test
	public void naoDeveAceitarTelefoneComTamanhoCurto() {
		cliente.setTelefone("8732");
		
		Set<ConstraintViolation<Cliente>> restricoes = validador.validate(cliente);
	
		ConstraintViolation<Cliente> restricao = restricoes.iterator().next();
		
		
	assertAll(
			()-> assertTrue(restricoes.size() == 1),
			()->assertEquals("telefone", restricao.getPropertyPath().toString()),
			()->assertEquals("Tamanho inválido: min => 8 max => 9", restricao.getMessage()),
			()->assertEquals("8732", restricao.getInvalidValue())			
			);
			
	}
	
	
	@Test
	public void naoDeveAceitarTelefoneComTamanhoLongo() {
		cliente.setTelefone("8732544554");
		
		Set<ConstraintViolation<Cliente>> restricoes = validador.validate(cliente);
	
		ConstraintViolation<Cliente> restricao = restricoes.iterator().next();
		
		
	assertAll(
			()-> assertTrue(restricoes.size() == 1),
			()->assertEquals("telefone", restricao.getPropertyPath().toString()),
			()->assertEquals("Tamanho inválido: min => 8 max => 9", restricao.getMessage()),
			()->assertEquals("8732544554", restricao.getInvalidValue())			
			);
			
	}
	
	
	@Test
	public void naoDeveAceitarTelefoneComCaracteresDiferentesDeDigitos() {
		cliente.setTelefone("3236-4487");
		
		Set<ConstraintViolation<Cliente>> restricoes = validador.validate(cliente);
	
		ConstraintViolation<Cliente> restricao = restricoes.iterator().next();
		
		
	assertAll(
			()-> assertTrue(restricoes.size() == 1),
			()->assertEquals("telefone", restricao.getPropertyPath().toString()),
			()->assertEquals("Telefone deve possuir só digitos", restricao.getMessage()),
			()->assertEquals("3236-4487", restricao.getInvalidValue())			
			);
			
	}
	
	
	public void deveSalvarCliente() {
		
		clienteRepository.save(cliente);
		List<Cliente> clientes = clienteRepository.findAll();
		assertEquals(1, clientes.size());
		assertEquals("Jamil", clientes.get(0).getNome());
	}
	
	
	
	
	

}
